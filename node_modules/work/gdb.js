/**
 * Created by lyle on 14-4-13.
 */

/*检查输出结果是不是只有(GDB),这样的结果没有必要发送给用户*/
function checkWord(data)
{
    if(data.match(/\b\(gdb\)\b/))
        return true;
    else return false;
};

/*命令传到gdb,进行交互*/
exports.interactive = function(socket)
{
    var staticVar = require('./staticVar.js');
    var spawn = require("child_process").spawn;
    var binaryFile = staticVar.getBinaryFile();
    var gdb = spawn('gdb');

    gdb.stdout.setEncoding('utf8');
    gdb.stderr.setEncoding('utf8');
    gdb.stdin.setEncoding('utf8');

    console.log("开始调试");

    gdb.stderr.on('data',function(data)
    {
        socket.emit('executeError',{commandResult:data});
        return false;
    });

    gdb.stdout.on('data',function(data)
    {
        console.log(">>>>"+data);
        if(checkWord(data) == false)//不是只包含"(gdb)\n"字符串
        {
            data=data.replace(/\n*\(gdb\)\s*/g,"");//\s是空白符的意思重复零次或更多次
            console.log("after repace"+data+"<<");
            if(data.length >1)
            {
                socket.emit('executeSuccess',{commandResult:data});
            }
        }
    });

    socket.on('command',function(commandObject)
    {
        /*这里调试一下顺序比较好一些, 上面可能在执行下面的命令之前就有数据输出了*/
        console.log("*****************************\n"+commandObject.com);
        gdb.stdin.write(commandObject.com+"\n");
        /*每执行一个命令就自动执行一次where命令,已得到当前行号,前提是已经设置有breakpoint*/
        gdb.stdin.write("where\n");

    });
    socket.on('disconnect',function()
    {
        gdb.kill();
        console.log("gdb退出");
    });
    gdb.stdout.on('end',function()
    {
        gdb.kill();
    });
    console.log("file "+binaryFile);
    gdb.stdin.write("file "+binaryFile+"\n");
    /*又是异步事件的原因*/
};
