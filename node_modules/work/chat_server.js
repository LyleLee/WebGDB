/**
 * Created by lyle on 14-4-2.
 */

exports.begin = function(httpApp)
{
    var io = require('socket.io').listen(httpApp);
    var counter = 0; //计数器变量

    io.sockets.on('connection',function(socket)
    {
        ++counter;
        var data = new Date()+" : user connected : "+counter;
        socket.emit('users',{howManyPeople:counter});//仅仅通知当前用户

        socket.broadcast.emit('users',{howManyPeople:counter});//通知所有用户

        socket.on('disconnect',function()
        {
            --counter;
            var s1 = new Date()+" : user disconnet : "+counter;

            socket.broadcast.emit('users',{howManyPeople:counter});
        });

        socket.on('sendMessage',function(data)
        {
            console.log(data.text);
            socket.broadcast.emit('broadcastMessage',data);
        });
    });
}

/*创建事件监听器在保存好代码之后编译代码, 并返回结果给客户端*/
var EventEmitter = require('events').EventEmitter;
var even = new EventEmitter();

/*处理编译器*/
exports.onService = function(httpApp)
{
    var fs = require('fs');
    var staticVar = require('./staticVar.js');
    var gccModule = require('./gcc.js');
    var gdbModule = require('./gdb.js');
    var logFile = staticVar.getLogFile();
    var codeFile = staticVar.getCodeFileName();
    var io = require('socket.io').listen(httpApp);

    io.sockets.on('connection',function(socket)
    {
        fs.appendFile(logFile,new Date().toTimeString()+"user connected\n",function(err)
        {
            if(err)
            {
                console.log("write file error"+err);
                return false;
            }
        });

        /*接收代码*/
        socket.on('code',function(data)
        {
            fs.open(codeFile,'w+',0666,function(err,fd)
            {
                if(err)
                {
                    console.log("write code error when opening file:"+codeFile);
                    return false;
                }
                console.log(data.code);
                fs.write(fd,data.code,0,'utf8',function(err,written,string)
                {
                    if(err)
                    {
                        console.log("write code errpr");
                        fs.close(fd);
                        return false;
                    }
                    //console.log("written:"+written+"\tstring:"+string.length);
                    socket.emit('codeReceive',{});

                    fs.close(fd);

                    /*代码保存到文件中则进行编译*/
                    gccModule.doCompile(socket);
                });

            });
        });

        /*接收调试命令*/
        socket.on('command',function(data)
        {
            gdbModule.interactive(socket,data);
        });//{com:com}

    });
};
